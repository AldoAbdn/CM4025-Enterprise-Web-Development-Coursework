{"version":3,"sources":["components/ProtectedRoute.js","controllers/controller.js","controllers/userController.js","security/security.js","components/views/ManageFeedSources.js","controllers/feedController.js","components/FeedItem.js","components/views/ViewFeeds.js","components/Dashboard.js","controllers/authController.js","components/views/Login.js","components/views/Signup.js","App.js","serviceWorker.js","index.js"],"names":["ProtectedRoute","this","props","loggedIn","react_default","a","createElement","Route","Redirect","to","state","location","Component","Controller","apiPath","arguments","length","undefined","Object","classCallCheck","path","userController","UserController","possibleConstructorReturn","getPrototypeOf","call","token","fetch","method","headers","Accept","Content-Type","x-access-token","response","json","feedSource","body","JSON","stringify","security","Security","_this","filterSources","index","array","feedSources","indexOf","object","key","test","string","replace","ManageFeedSources","handleOnChange","e","setState","filter","target","value","handleAddClick","_ref","asyncToGenerator","regenerator_default","mark","_callee","user","wrap","_context","prev","next","setLoading","manageFeedSources","addFeed","sanitizeString","id","sent","handleUserUpdate","errorMessage","t0","message","stop","_x","apply","handleDeleteClick","_ref2","_callee2","_context2","removeFeed","_x2","mapAddFeedSources","className","onClick","mapRemoveFeedSources","filterExistingFeedSources","userFeedSources","filterByFilter","includes","getDetails","_context3","filteredFeedSources","onChange","type","placeholder","map","React","feedController","FeedController","feeds","FeedItem","item","keys","feed","image","href","link","title","src","getImageUrl","alt","onError","style","display","dangerouslySetInnerHTML","__html","description","pubDate","ViewFeeds","mapFeedItems","components_FeedItem","sortPosts","b","Date","getTime","viewFeeds","updateFeedSources","updateFeeds","prevProps","setFeedSources","getFeeds","getFeedSources","handleFeedSourcesUpdate","_context4","lastLogin","newPosts","oldPosts","_arr","entries","_i","_ref3","slicedToArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","url","date","push","err","return","sort","Dashboard","email","class","username","handleLogoutClick","views_ManageFeedSources","views_ViewFeeds","authController","AuthController","credentials","Login","handleSubmit","auth","login","preventDefault","sanitize","password","defineProperty","_this2","onSubmit","event","Link","Signup","signup","password2","abrupt","App","localStorage","setItem","history","logout","removeItem","loading","objectSpread","parse","getItem","_unused","_this3","Switch","exact","from","components_ProtectedRoute","render","routeProps","components_Dashboard","views_Login","views_Signup","withRouter","Boolean","window","hostname","match","ReactDOM","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d898dde7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route } from 'react-router'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n/**\r\n * @class ProtectedRoute\r\n * @description Component that prevents navigation to a route that requires auth\r\n */\r\nclass ProtectedRoute extends Component {\r\n    /**\r\n    * @function render\r\n    * @description React lifecycle method, returns visible part of Login component \r\n    */\r\n    render(){\r\n        if (this.props.loggedIn){\r\n            return (<Route {...this.props}/>)\r\n        } else {\r\n            return (<Redirect to='/login' state={this.props.location}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default ProtectedRoute;","class Controller {\r\n    constructor(apiPath=\"\"){\r\n        this.path = apiPath;\r\n    }\r\n}\r\n\r\nexport default Controller ","import Controller from './controller';\r\n\r\n/**\r\n * @class UserController \r\n * @description User Controller for getting and updating user \r\n */\r\nclass UserController extends Controller {\r\n    constructor(){\r\n        super(\"/api/user/\")\r\n    }\r\n\r\n    async getDetails(token){\r\n      let response = await fetch(this.path+\"getDetails\", {\r\n        method:'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': token\r\n        }\r\n      });\r\n      return response.json();\r\n    }\r\n\r\n    async addFeed(feedSource, token){\r\n      let response = await fetch(this.path+\"addFeed\", {\r\n        method:'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': token\r\n        },\r\n        body:JSON.stringify({feedSource})\r\n      });\r\n      return response.json();\r\n    }\r\n\r\n    async removeFeed(feedSource,token){\r\n      let response = await fetch(this.path+\"removeFeed\", {\r\n        method:'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': token\r\n        },\r\n        body:JSON.stringify({feedSource})\r\n      });\r\n      return response.json();\r\n    }\r\n}\r\n\r\nexport default new UserController();","/**\r\n * @class Security \r\n * @description For securing app\r\n */\r\nclass Security {\r\n    constructor(){\r\n        this.feedSources = [];\r\n    }\r\n\r\n    /**\r\n     * @function sanitize\r\n     * @description removes any $ from keys\r\n     * @param {Object} object \r\n     */\r\n    sanitize(object){\r\n        if (object instanceof Object) {\r\n            for (var key in object){\r\n                if(/^$/.test(key)) {\r\n                    delete object[key];\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * @function sanitizeString\r\n     * @description removes any $ from string\r\n     * @param {String} string \r\n     */\r\n    sanitizeString(string){\r\n        return string.replace(/^$/,'');\r\n    }\r\n\r\n    /**\r\n     * @function filterSources\r\n     * @description filters a list to only include available sources from the server \r\n     * @param {String} feedSource name of feed\r\n     * @param {int} index index\r\n     * @param {Array} array array \r\n     */\r\n    filterSources = (feedSource, index, array)=>{\r\n        return this.feedSources.indexOf(feedSource) >= 0;\r\n    }\r\n\r\n    /**\r\n     * @function setFeedSources\r\n     * @description sets feed sources \r\n     * @param {Array} feedSources list of feed source names\r\n     */\r\n    setFeedSources(feedSources){\r\n        this.feedSources = feedSources;\r\n    }\r\n}\r\n\r\nexport default new Security();","import React from 'react';\r\nimport userController from '../../controllers/userController';\r\nimport security from '../../security/security';\r\n\r\n/**\r\n * @class ManageFeedSources\r\n * @description User view for adding and removing users selected feeds \r\n */\r\nclass ManageFeedSources extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={filter:\"\",errorMessage:\"\"};\r\n  }\r\n  /**\r\n   * @function componentDidMount\r\n   * @async\r\n   * @description React lifecycle method. When component is first loaded, gets users details from controller with auth token passed from App\r\n   */\r\n  async componentDidMount(){\r\n    this.props.setLoading({manageFeedSources:true});\r\n    try {\r\n      let user = await userController.getDetails(this.props.token);\r\n      this.props.handleUserUpdate(user);\r\n      this.setState({errorMessage:\"\"});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n    this.props.setLoading({manageFeedSources:false});\r\n  }\r\n\r\n  /**\r\n    * @function handleOnChange\r\n    * @description Handles input onChange event, updates state  \r\n    * @param {event} e submit event \r\n    */\r\n  handleOnChange = (e) => {\r\n    this.setState({filter:e.target.value}); //Changes filter value to show only available feed names that match \r\n  }\r\n\r\n  /**\r\n   * @function handleAddClick\r\n   * @async\r\n   * @description Makes call to user controller to add a feed to user object \r\n   * @param {event} e click event \r\n   */\r\n  handleAddClick = async (e) => {\r\n    this.props.setLoading({manageFeedSources:true});\r\n    try {\r\n      let user = await userController.addFeed(security.sanitizeString(e.target.id),this.props.token); //Pass feed name and users auth token \r\n      this.props.handleUserUpdate(user); //Pass user up to App \r\n      this.setState({errorMessage:\"\"});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n    this.props.setLoading({manageFeedSources:false});\r\n  }\r\n\r\n  /**\r\n   * @function handleDeleteClick\r\n   * @async\r\n   * @description Makes call to user controller to remove a feed from user object \r\n   * @param {event} e click event \r\n   */\r\n  handleDeleteClick = async (e) => {\r\n    this.props.setLoading({manageFeedSources:true});\r\n    try {\r\n      let user = await userController.removeFeed(security.sanitizeString(e.target.id),this.props.token); //Pass feed anme and user auth token \r\n      this.props.handleUserUpdate(user); //Pass user up to App\r\n      this.setState({errorMessage:\"\"});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n    this.props.setLoading({manageFeedSources:false});\r\n  }\r\n\r\n  /**\r\n   * @function mapAddFeedSources\r\n   * @description Map function that maps a feed source name to a list group item with a + symbol for adding to users list \r\n   * @param {String} feedSource name of feed\r\n   * @param {int} index index in array\r\n   * @param {Array} array entire array \r\n   */\r\n  mapAddFeedSources = (feedSource,index,array)=>{\r\n      return <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\">{feedSource} <span id={feedSource} onClick={this.handleAddClick} className=\"fas fa-plus\"></span></li>\r\n  }\r\n\r\n  /**\r\n   * @function mapRemoveFeedSources\r\n   * @description Map function that maps a feed source name to a list group item with a - symbol for removing from users list \r\n   * @param {String} feedSource name of feed\r\n   * @param {int} index index in array\r\n   * @param {Array} array entire array \r\n   */\r\n  mapRemoveFeedSources = (feedSource, index, array)=>{\r\n    return <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\">{feedSource} <span id={feedSource} onClick={this.handleDeleteClick} className=\"fas fa-times\"></span></li>\r\n  }\r\n\r\n  /**\r\n   * @function filteredFeedSources\r\n   * @description Filter function that filters out feed names that the user already has added \r\n   * @param {String} feedSource name of feed\r\n   * @param {int} index index in array\r\n   * @param {Array} array entire array \r\n   */\r\n  filterExistingFeedSources = (feedSource, index, array)=>{\r\n    if(this.props.userFeedSources!==undefined){\r\n      return !(this.props.userFeedSources.indexOf(feedSource)>=0);\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function filterByFilter\r\n   * @description Filter function that filters feed source names by a string value (filter)\r\n   * @param {String} feedSource name of feed\r\n   * @param {int} index index in array\r\n   * @param {Array} array entire array \r\n   */\r\n  filterByFilter = (feedSource, index, array)=>{\r\n    if(this.state.filter!==\"\"){\r\n      return feedSource.includes(this.state.filter);\r\n    }else{\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @function render\r\n    * @description React lifecycle method, returns visible part of component \r\n    */\r\n  render() {\r\n    let errorMessage;\r\n    if(this.state.errorMessage!==\"\"){\r\n      errorMessage = <p className=\"alert alert-danger\">{this.state.errorMessage}</p>\r\n    }\r\n    let userFeedSources = this.props.userFeedSources || [];\r\n    let filteredFeedSources = this.props.feedSources.filter(this.filterExistingFeedSources) || [];\r\n    filteredFeedSources = filteredFeedSources.filter(this.filterByFilter);\r\n    return (\r\n      <div id=\"manageFeedSources\" className=\"card row\">\r\n        <div className=\"col-sm-12\">\r\n          {errorMessage}\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12\">\r\n              <form>\r\n                <h5>Feed Management</h5>\r\n                <input className=\"form-control\" value={this.state.filter} onChange={this.handleOnChange} type=\"text\" placeholder=\"Filter\"/>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div className={filteredFeedSources.length>0?\"row\":\"d-none\"}>\r\n            <div className=\"col-sm-12\">\r\n              <h6>Add Feeds</h6>\r\n              <ul className=\"list-group\">\r\n                {filteredFeedSources.map(this.mapAddFeedSources)}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <div className={userFeedSources.length>0?\"row\":\"d-none\"}>\r\n            <div className=\"col-sm-12\">\r\n              <h6>Current Feeds</h6>\r\n              <ul className=\"list-group\" id=\"current-feed-list\">\r\n                {userFeedSources.map(this.mapRemoveFeedSources)}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManageFeedSources;","import Controller from './controller';\r\n/**\r\n * @class FeedController \r\n * @description Feed Controller for gettting feeds from the server \r\n */\r\nclass FeedController extends Controller {\r\n    constructor(){\r\n        super(\"/api/feed/\")\r\n    }\r\n\r\n    async getFeeds(feeds, token){\r\n        let response = await fetch(this.path+\"getFeeds?feeds=\"+JSON.stringify(feeds), {\r\n            method:'GET',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',\r\n              'x-access-token': token\r\n            }\r\n        });\r\n        return response.json();\r\n    }\r\n\r\n    async getFeedSources(token){\r\n        let response = await fetch(this.path+\"getFeedSources\", {\r\n            method:'GET',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json',\r\n              'x-access-token': token\r\n            }\r\n        });\r\n        return response.json();\r\n    }\r\n}\r\n\r\nexport default new FeedController();","import React from 'react';\r\n\r\n/**\r\n * @class FeedItem\r\n * @description Represents a single item from a feed, renders it as a bootstrap card \r\n */\r\nclass FeedItem extends React.Component {\r\n  /**\r\n   * Tries to get an image url from a feed item \r\n   * @param {Object} item \r\n   */\r\n  getImageUrl(item){\r\n    let key=Object.keys(item).filter((key)=>{return key.includes('media')})[0];\r\n    if(key!=null){\r\n      return item[key];\r\n    } else {\r\n      return item.feed.image;\r\n    }\r\n  }\r\n  /**\r\n    * @function render\r\n    * @description React lifecycle method, returns visible part of component \r\n    */\r\n  render() {\r\n    let item = this.props.item;\r\n    return (\r\n      <div className=\"card feed-item\">\r\n        <div className=\"card-header\">\r\n          <a href={item.feed.link}>{item.feed.title}</a>\r\n        </div>\r\n        <img className=\"card-img-top\" src={this.getImageUrl(item)} alt={item.title} onError={(e)=> e.target.style.display=\"none\"}/>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\" dangerouslySetInnerHTML={{__html:item.title}}></h5>\r\n          <p className=\"card-text\" dangerouslySetInnerHTML={{__html:item.description}}></p>\r\n          <a className=\"card-link\" href={item.link}>Go To Article</a>\r\n        </div>\r\n        <div className=\"card-footer text-muted\">\r\n          {item.pubDate};\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedItem;","import React from 'react';\r\nimport feedController from '../../controllers/feedController';\r\nimport FeedItem from '../FeedItem';\r\nimport security from '../../security/security';\r\n\r\n/**\r\n * @class ViewFeeds\r\n * @description Feeds view that gets feeds using feed controller and displays them \r\n */\r\nclass ViewFeeds extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {feedSources:[],feeds:{},errorMessage:\"\"};\r\n  }\r\n\r\n  /**\r\n   * @function componentDidMount\r\n   * @async\r\n   * @description React lifecycle method. When component is first loaded, gets list of available feeds from the server and tries to get user's selected feeds \r\n   */\r\n  async componentDidMount(){\r\n    this.props.setLoading({viewFeeds:true});\r\n    await this.updateFeedSources();\r\n    await this.updateFeeds();\r\n    this.props.setLoading({viewFeeds:false});\r\n  }\r\n\r\n  /**\r\n   * @function componentDidUpdate\r\n   * @async\r\n   * @description React lifecycle method. When component is updated, viewable feeds\r\n   */\r\n  async componentDidUpdate(prevProps){\r\n    if(prevProps.feedSources.length!==this.props.feedSources.length){\r\n      this.props.setLoading({viewFeeds:true});\r\n      security.setFeedSources(this.props.feedSources);\r\n      await this.updateFeeds();\r\n      this.props.setLoading({viewFeeds:false});\r\n    }  \r\n  }\r\n  \r\n  /**\r\n   * @function updateFeeds\r\n   * @async\r\n   * @description updates viewable feeds\r\n   */\r\n  async updateFeeds(){\r\n    try{\r\n      let feeds = await feedController.getFeeds(this.props.feedSources.filter(security.filterSources), this.props.token);\r\n      this.setState({feeds:feeds});\r\n      this.setState({errorMessage:\"\"});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function updateFeedSources\r\n   * @async\r\n   * @description gets list of feeds that can be retrieved from the server \r\n   */\r\n  async updateFeedSources(){\r\n    try{\r\n      let feedSources = await feedController.getFeedSources(this.props.token);\r\n      this.props.handleFeedSourcesUpdate(feedSources);\r\n      this.setState({errorMessage:\"\"});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @function mapFeedItems\r\n   * @description Map function that maps a feed item to a component that renders it \r\n   * @param {Object} item feed item \r\n   * @param {int} index index in array\r\n   * @param {Array} array entire array \r\n   */\r\n  mapFeedItems = (item, index, array) => {\r\n    return <FeedItem item={item}/>\r\n  }\r\n\r\n  /**\r\n   * @function sortPosts \r\n   * @description Sort function that sorts dates, newest first \r\n   */\r\n  sortPosts = (a,b) => {\r\n    return (new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime());\r\n  }\r\n\r\n  /**\r\n  * @function render\r\n  * @description React lifecycle method, returns visible part of component \r\n  */\r\n  render() {\r\n    let errorMessage;\r\n    if(this.state.errorMessage!==\"\"){\r\n      errorMessage = <p className=\"alert alert-danger\">{this.state.errorMessage}</p>\r\n    }\r\n    let lastLogin = new Date(this.props.lastLogin);\r\n    let newPosts = [];\r\n    let oldPosts = [];\r\n    for (let [key, feed] of Object.entries(this.state.feeds)){\r\n      if(feed.item){\r\n        for (let item of feed.item){\r\n          item.feed = {title:feed.title,description:feed.description,link:feed.link,image:feed.image!=undefined ? feed.image.url:\"\"};\r\n          let date = new Date(item.pubDate);\r\n          if(lastLogin.getTime() <= date.getTime()){\r\n            newPosts.push(item);\r\n          } else {\r\n            oldPosts.push(item);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    newPosts = newPosts.sort(this.sortPosts);\r\n    oldPosts = oldPosts.sort(this.sortPosts);\r\n    return (\r\n      <div id=\"viewFeeds\" className=\"card row\">\r\n        <div className=\"col-sm-12\">\r\n        {errorMessage}\r\n          <h5>View Feeds</h5>\r\n          <div className={newPosts.length>0?\"row card\":\"d-none\"}>\r\n            <div className=\"col-sm-12\">\r\n              <h5>New Posts</h5>\r\n              {newPosts.map(this.mapFeedItems)}\r\n            </div>\r\n          </div>\r\n          <div className={oldPosts.length>0?\"row card\":\"d-none\"}>\r\n            <div className=\"col-sm-12\">\r\n              <h5>Old Posts</h5>\r\n              {oldPosts.map(this.mapFeedItems)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ViewFeeds;","import React from 'react';\r\nimport ManageFeedSources from './views/ManageFeedSources';\r\nimport ViewFeeds from './views/ViewFeeds';\r\n\r\n/**\r\n * @class Dashboard \r\n * @description Wrapper component that displays ManageFeedSources and ViewFeeds\r\n */\r\nclass Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {user:{email:\"\",feedSources:[]}, feedSources:[]}\r\n  }\r\n\r\n  /**\r\n   * @function handleUserUpdate\r\n   * @description Sets new user \r\n   */\r\n  handleUserUpdate = (user) => {\r\n    this.setState({user:user});\r\n  }\r\n\r\n  /**\r\n   * @function handleFeedSourcesUpdate\r\n   * @description Sets a new list of feed sources \r\n   */\r\n  handleFeedSourcesUpdate = (feedSources)=>{\r\n    this.setState({feedSources:feedSources});\r\n  }\r\n\r\n  /**\r\n    * @function render\r\n    * @description React lifecycle method, returns visible part of component \r\n    */\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <div class=\"card row\">\r\n              <h1>RSS Feed Viewer</h1>\r\n              <h3>{this.state.user.username}</h3>\r\n              <a href=\"/api.html\" target=\"_blank\">API Documentation</a>\r\n              <button className=\"btn btn-primary btn-block\" onClick={this.props.handleLogoutClick}>Logout</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <ManageFeedSources setLoading={this.props.setLoading} feedSources={this.state.feedSources || []} userFeedSources={this.state.user.feedSources||[]} token={this.props.token} handleUserUpdate={this.handleUserUpdate}/>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12\">\r\n            <ViewFeeds setLoading={this.props.setLoading} token={this.props.token} lastLogin={this.state.user.lastLogin} handleFeedSourcesUpdate={this.handleFeedSourcesUpdate} feedSources={this.state.user.feedSources}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import Controller from './controller';\r\n/**\r\n * @class AuthController \r\n * @description Auth Controller for sending events to the server \r\n */\r\nclass AuthController extends Controller {\r\n    constructor(){\r\n        super(\"/api/auth/\")\r\n    }\r\n\r\n    async signup(credentials){\r\n      let response = await fetch(this.path+\"addUser\", {\r\n        method:'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:JSON.stringify(credentials)\r\n      });\r\n      return response.json();\r\n    }\r\n\r\n    async login(credentials){\r\n      let response = await fetch(this.path+\"login\", {\r\n        method:'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:JSON.stringify(credentials)\r\n      });\r\n      return response.json();\r\n    }\r\n\r\n    async logout(){\r\n      let response = await fetch(this.path+\"logout\", {\r\n        method:'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body:JSON.stringify({})\r\n      });\r\n      return response.json();\r\n    }\r\n}\r\n\r\nexport default new AuthController();","import React from 'react';\r\nimport authController from '../../controllers/authController';\r\nimport {Link} from 'react-router-dom';\r\nimport security from '../../security/security';\r\n\r\n/**\r\n * @class Login\r\n * @description This is an auth view for logging a user in \r\n */\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { username:\"\", password:\"\", errorMessage:\"\" };\r\n  }\r\n  /**\r\n  * @function handleSubmit\r\n  * @description Handles form submit, makes call to auth controller \r\n  * @param {event} e submit event \r\n  * @async\r\n  */\r\n  handleSubmit = async (e) => {\r\n    this.props.setLoading({login:true});\r\n    e.preventDefault();\r\n    let credentials = security.sanitize({username:this.state.username,password:this.state.password}); //Removes any $ to prevent non sql injection \r\n    try{\r\n      let auth = await authController.login(credentials); //Call to server to auth credentials using controller \r\n      this.props.handleSubmit(auth); //Gives auth to App \r\n      this.setState({errorMessage:auth.message}); //If unsucessful show message \r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n    this.props.setLoading({login:false});\r\n  }\r\n\r\n  /**\r\n    * @function handleOnChange\r\n    * @description Handles input onChange event, updates state  \r\n    * @param {event} e submit event \r\n    */\r\n  handleOnChange = (e) => {\r\n      this.setState({\r\n          [e.target.id]: e.target.value //Sets state based on inputs current value \r\n      })\r\n  }\r\n\r\n  /**\r\n    * @function render\r\n    * @description React lifecycle method, returns visible part of component \r\n    */\r\n  render() {\r\n    let errorMessage;\r\n    if(this.state.errorMessage!==\"\"){\r\n      errorMessage = <p className=\"alert alert-danger\">{this.state.errorMessage}</p>\r\n    }\r\n    return (\r\n      <form id=\"loginForm\" onSubmit={(event)=>this.handleSubmit(event)}>\r\n        <div className=\"form-group\">\r\n          <input className=\"form-control\" type=\"text\" id=\"username\" value={this.state.username} onChange={this.handleOnChange} placeholder=\"Username\"/>\r\n          <input className=\"form-control\" type=\"password\" id=\"password\" value={this.state.password} onChange={this.handleOnChange} placeholder=\"Password\"/>\r\n          <button className=\"btn btn-primary btn-block\" type=\"submit\">Login</button>\r\n          <Link to=\"/signup\">Don't have an account? Sign Up Here</Link>\r\n        </div>\r\n        {errorMessage}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport authController from '../../controllers/authController';\r\nimport {Link} from 'react-router-dom';\r\nimport security from '../../security/security';\r\n\r\n/**\r\n * @class SignUp\r\n * @description This is an auth view for sign up\r\n */\r\nclass Signup extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { username:\"\",password:\"\",password2:\"\",errorMessage:\"\" };\r\n  }\r\n\r\n  /**\r\n  * @function handleSubmit\r\n  * @description Handles form submit, makes call to auth controller \r\n  * @param {event} e submit event \r\n  * @async\r\n  */\r\n  handleSubmit = async (e) => {\r\n    this.props.setLoading({signup:true});\r\n    e.preventDefault();\r\n    if(this.state.password!==this.state.password2){\r\n        this.setState({errorMessage:\"Passwords must match\"});\r\n        return;\r\n    }\r\n    let credentials = security.sanitize({username:this.state.username,password:this.state.password});\r\n    try{\r\n      let auth = await authController.signup(credentials);\r\n      this.props.handleSubmit(auth);\r\n      this.setState({errorMessage:auth.message});\r\n    }catch(error){\r\n      this.setState({errorMessage:error.message});\r\n    }\r\n    this.props.setLoading({signup:false});\r\n  }\r\n\r\n  /**\r\n    * @function handleOnChange\r\n    * @description Handles input onChange event, updates state  \r\n    * @param {event} e submit event \r\n    */\r\n  handleOnChange = (e) => { \r\n    this.setState({\r\n        [e.target.id]: e.target.value\r\n    },()=>{\r\n        if(this.state.password!==this.state.password2){\r\n            this.setState({errorMessage:\"Passwords do not match\"});\r\n        } else {\r\n            this.setState({errorMessage:\"\"});\r\n        }\r\n    })\r\n  }\r\n\r\n  /**\r\n  * @function render\r\n  * @description React lifecycle method, returns visible part of component \r\n  */\r\n  render() {\r\n    let errorMessage;\r\n    if(this.state.errorMessage!==\"\"){\r\n      errorMessage = <p className=\"alert alert-danger\">{this.state.errorMessage}</p>\r\n    }\r\n    return (\r\n      <form id=\"loginForm\" onSubmit={(event)=>this.handleSubmit(event)}>\r\n        <div className=\"form-group\">\r\n          <input className=\"form-control\" type=\"text\" id=\"username\" value={this.state.username} onChange={this.handleOnChange} placeholder=\"Username\"/>\r\n          <input className=\"form-control\" type=\"password\" id=\"password\" value={this.state.password} onChange={this.handleOnChange} placeholder=\"Password\"/>\r\n          <input className=\"form-control\" type=\"password\" id=\"password2\" value={this.state.password2} onChange={this.handleOnChange} placeholder=\"Re-Type Password\"/>\r\n          <button className=\"btn btn-primary btn-block\" type=\"submit\">Sign Up</button>\r\n          <Link to=\"/login\">Have an Account? Log In Here</Link>\r\n        </div>\r\n        {errorMessage}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport Dashboard from './components/Dashboard';\nimport Login from './components/views/Login';\nimport Signup from './components/views/Signup';\nimport { withRouter } from 'react-router'\nimport './App.css';\nimport authController from './controllers/authController';\n\n/**\n * @class App\n * @description Main app component \n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { auth:{token:\"\"}, loading:{login:false,signup:false,manageFeedSources:false,viewFeeds:false} };\n  }\n\n  /**\n   * @function componentDidMount\n   * @description React lifecycle method. Checks if auth exists\n   */\n  componentDidMount(){\n    let auth;\n    //Try to parse stored auth\n    try{\n      auth = JSON.parse(localStorage.getItem('auth'));\n    }catch{\n      auth = null;\n    }\n    if (auth!=undefined && auth!=null){ //Is successful store and navigate\n      this.setState({auth},()=>{\n        this.props.history.push(\"/dashboard\");\n      });\n    }\n  }\n\n  /**\n   * @function handleSubmit\n   * @description Sets auth when login or sign up occurs, if successful navigates to dashboard \n   * @param {Object} auth auth returned from server \n   */\n  handleSubmit = (auth) =>{ \n    this.setState({auth},()=>{\n      localStorage.setItem('auth',JSON.stringify(auth));//Store auth to persist login \n      if(this.state.auth.auth)\n        this.props.history.push(\"/dashboard\");\n    });\n  }\n\n  /**\n   * @function handleLogoutClick\n   * @async\n   * @description Logs out user \n   * @param {event} e click event \n   */ \n  handleLogoutClick = async (e)=>{\n    e.preventDefault();\n    const response = await authController.logout();\n    localStorage.removeItem('auth');//Remove auth\n    this.setState({auth:response});\n  }\n\n  /**\n   * @function setLoading\n   * @description helper function to show a loading spinner \n   */\n  setLoading = (loading)=>{\n    this.setState({loading:{...this.state.loading,...loading}});\n  }\n\n  /**\n  * @function render\n  * @description React lifecycle method, returns visible part of Login component \n  */\n  render() {\n    //Check if loading, and if yes renders a spinner \n    let loading = false;\n    for(let key in this.state.loading){\n      if(this.state.loading[key]){\n        loading = this.state.loading[key];\n      }\n    }\n    if(loading){\n      loading = (\n      <div id=\"loading\">\n        <div class=\"lds-ripple\"><div></div><div></div></div>\n      </div>)\n    } else {\n      loading = null;\n    }\n    return (\n      <div id=\"container\">\n        {loading}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-2\"></div>\n            <div className=\"col-sm-8\">\n              <Switch>\n                <Redirect exact from=\"/\" to=\"dashboard\"/>\n                <ProtectedRoute loggedIn={this.state.auth.auth} path=\"/dashboard\" render={(routeProps) => (<Dashboard setLoading={this.setLoading} handleLogoutClick={this.handleLogoutClick} token={this.state.auth.token}/>)}/>\n                <Route path=\"/login\" render={(routeProps) => (<Login setLoading={this.setLoading} handleSubmit={this.handleSubmit}/>)}/>\n                <Route path=\"/signup\" render={(routeProps) => (<Signup setLoading={this.setLoading} handleSubmit={this.handleSubmit}/>)}/>\n              </Switch>\n            </div>\n            <div className=\"col-sm-2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n//Hash router is what allows navigation using /#{routename}\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}